{% extends "templates/web.html" %}

{% block style %}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<style>
    /* Container and layout styles */
    #itemsTableBody tr td .item-amount,
    #itemsTableBody .item-qty {
        text-align: center;
    }
    
    .container { 
        padding-left: 0; 
        padding-right: 0; 
        margin-left: 0 !important; 
        margin-right: 0 !important; 
        width: 100% !important;
    }
    
    html, body { 
        height: 100%; 
        width: 100%; 
        margin: 0; 
        padding: 0; 
        overflow: auto;
    }
    
    .header-container, .page-header, .footer-container, 
    footer, nav, .page-header, .footer-info { 
        display: none !important; 
    }
    
    body, .page-content { 
        padding: 0 !important; 
        margin: 0 !important; 
        height: 100%; 
        width: 100%; 
        background-color: #f5f7fa; 
        overflow: hidden;
    }
    
    /* Color variables */
    :root {
        --primary-color: #2c3e50;
        --secondary-color: #4a6491;
        --navyblue: #002855;
        --accent-color: #e74c3c;
        --light-bg: #f8f9fa;
        --orange-color: #ff9800;
        --dark-text: #2c3e50;
        --border-radius: 8px;
        --box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        --success-color: #28a745;
    }
    
    /* Main container - FIXED SCROLLING */
    .ha-pos-container {
        height: 100vh;
        width: 100%;
        padding: 0;
        margin: 0;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }
    
    /* Header */
    .ha-pos-header {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        padding: 12px 20px;
        margin-bottom: 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-shrink: 0;
    }
    
    /* Main card - FIXED SCROLLING */
    .ha-pos-card {
        background-color: white;
        box-shadow: var(--box-shadow);
        padding: 15px;
        margin-bottom: 0;
        flex: 1;
        display: flex;
        flex-direction: column;
        overflow: hidden;
        height: 100%;
    }
    
    /* Scrollable content area */
    .ha-scrollable-content {
        flex: 1;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
    }
    
    /* Form elements */
    .ha-form-row {
        display: flex;
        gap: 20px;
        margin-bottom: 15px;
        flex-wrap: wrap;
    }
    
    .ha-form-group {
        display: flex;
        align-items: center;
        gap: 10px;
        flex: 1;
        min-width: 200px;
    }
    
    .ha-form-group label {
        margin-bottom: 0;
        font-weight: 600;
        color: var(--dark-text);
        min-width: 80px;
        text-align: right;
    }
    
    .ha-form-group select, 
    .ha-form-group input {
        flex: 1;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 14px;
    }
    
    /* Items table */
    .ha-items-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 1px;
        border: 1px solid #ddd;
    }
    
    .ha-items-table th {
        background-color: var(--navyblue);
        padding: 5px 3px;
        text-align: left;
        font-weight: 600;
        color: white;
        border: 1px solid #ddd;
    }
    
    .ha-items-table td {
        padding: 3px;
        border: 1px solid #ddd;
    }
    
    .ha-items-table tr:hover {
        background-color: #f8f9fa;
    }
    
    .ha-items-table input, 
    .ha-items-table select {
        width: 100%;
        padding: 3px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 14px;
        margin: 0;
    }
    
    /* Search dropdown */
    .ha-item-search-dropdown {
        position: absolute;
        max-height: 300px;
        overflow-y: auto;
        border: 1px solid #ddd;
        border-radius: 4px;
        background: white;
        z-index: 1000;
        box-shadow: var(--box-shadow);
        display: none;
        width: 400px;
    }
    
    .ha-search-result-item {
        padding: 5px 10px;
        border-bottom: 1px solid #eee;
        cursor: pointer;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .ha-search-result-item:hover {
        background-color: #e8f4fc;
    }
    
    .ha-search-result-active {
        background-color: #d1e7ff;
    }
    
    .ha-item-code {
        font-weight: 600;
        color: var(--secondary-color);
        font-size: 12px;
    }
    
    .ha-item-name {
        flex: 1;
        margin-left: 10px;
        font-size: 14px;
    }
    
    .ha-item-price {
        color: var(--dark-text);
        font-weight: 600;
        font-size: 12px;
    }
    
    /* Add item button */
    .ha-add-item-btn {
        background: var(--orange-color);
        max-width: 200px;
        color: white;
        border: none;
        padding: 4px 6px;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 600;
        margin-top: 5px;
        display: flex;
        align-items: center;
        transition: background 0.2s;
        font-size: 14px;
    }
    
    .ha-add-item-btn:hover {
        background: #e68900;
    }
    
    /* Footer */
    .ha-sticky-footer {
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100%;
        background: var(--navyblue);
        padding: 3px 6px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.2);
        z-index: 1000;
        height: 30px;
    }
    
    .ha-function-keys {
        display: flex;
        gap: 10px;
    }
    
    .ha-function-key {
        background: var(--orange-color);
        color: white;
        border: none;
        padding: 3px 5px;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 600;
        display: flex;
        gap: 5px;
        align-items: center;
        min-width: 90px;
        transition: all 0.2s;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        font-size: 12px;
    }
    
    .ha-function-key:hover {
        background: #e68900;
        transform: translateY(-2px);
    }
    
    .ha-logout-btn {
        background: var(--accent-color);
        color: white;
        border: none;
        padding: 3px 5px;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 600;
        display: flex;
        align-items: center;
        transition: all 0.2s;
        font-size: 12px;
    }
    
    .ha-logout-btn:hover {
        background: #c0392b;
    }
    
    /* Totals section */
    .ha-totals-section {
        display: flex;
        justify-content: flex-end;
        margin-top: 20px;
        padding-top: 15px;
        border-top: 2px dashed #ddd;
    }
    
    .ha-total-group {
        min-width: 200px;
        text-align: right;
    }
    
    .ha-total-label {
        font-weight: 600;
        color: var(--dark-text);
        margin-bottom: 5px;
    }
    
    .ha-total-value {
        font-size: 20px;
        font-weight: 700;
        color: var(--secondary-color);
    }
    
    /* Utility classes */
    .ha-relative { position: relative; }
    .text-center { text-align: center; }
    .item-stock-qty, .item-uom, .item-rate { text-align: center; }
    
    /* Status bar */
    .ha-status-bar {
        display: flex;
        gap: 15px;
        font-size: 14px;
        margin-bottom: 15px;
    }
    
    .ha-status-item {
        display: flex;
        align-items: center;
        gap: 5px;
    }
    
    .ha-status-indicator {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background: var(--success-color);
    }

    .form-field-active {
        background-color: #fff8e1;
        border: 2px solid #ffc107 !important;
    }
    
    /* Toast notifications */
    .ha-toast {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 6px;
        background: white;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        z-index: 1050;
        display: flex;
        align-items: center;
        gap: 10px;
        transform: translateX(100%);
        transition: transform 0.3s ease;
    }
    
    .ha-toast.show {
        transform: translateX(0);
    }
    
    .ha-toast-success {
        border-left: 4px solid var(--success-color);
    }
    
    .ha-toast-error {
        border-left: 4px solid var(--accent-color);
    }
    
    .ha-toast-icon {
        font-size: 20px;
    }
    
    .ha-toast-success .ha-toast-icon {
        color: var(--success-color);
    }
    
    .ha-toast-error .ha-toast-icon {
        color: var(--accent-color);
    }
    
    /* Loading overlay */
    .ha-loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255,255,255,0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 2000;
        display: none;
    }
    
    .ha-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid var(--secondary-color);
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    /* Responsive styles */
    @media (max-width: 768px) {
        .ha-function-keys { gap: 8px; }
        .ha-function-key { min-width: 70px; padding: 5px 8px; font-size: 10px; }
        .ha-form-row { flex-direction: column; gap: 15px; }
        .ha-form-group { min-width: 100%; }
        .ha-item-search-dropdown { width: 300px; }
    }

    .item-row-active {
        background-color: #e8f4fc !important;
        box-shadow: 0 0 0 2px #4a90e2 inset;
    }
    
    .search-mode-active .ha-item-search-dropdown {
        display: block !important;
    }

    /* Additional styles for focus management */
    .item-row-active {
        background-color: #e8f4fc !important;
        box-shadow: 0 0 0 2px #4a90e2 inset;
    }
    
    .search-mode-active .ha-item-search-dropdown {
        display: block !important;
    }
    
    /* Scrollbar styling for better visibility */
    .ha-scrollable-content::-webkit-scrollbar {
        width: 12px;
        height: 12px;
    }
    
    .ha-scrollable-content::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 10px;
    }
    
    .ha-scrollable-content::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 10px;
    }
    
    .ha-scrollable-content::-webkit-scrollbar-thumb:hover {
        background: #a8a8a8;
    }
    
    .ha-item-search-dropdown::-webkit-scrollbar {
        width: 8px;
    }
    
    .ha-item-search-dropdown::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 10px;
    }
    
    .ha-item-search-dropdown::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 10px;
    }
    
    .ha-item-search-dropdown::-webkit-scrollbar-thumb:hover {
        background: #a8a8a8;
    }

    .mt-4, .my-4 {
        margin-top: 0rem !important;
    }
    
    .container {
        margin: auto;
    }
    
    .ha-total-add-button-container {
        display: flex;
        justify-content: space-between;
    }
</style>
{% endblock %}

{% block page_content %}
<div class="ha-pos-container">
    <div class="ha-pos-card">
        <!-- Scrollable content area -->
        <div class="ha-scrollable-content">
            <div class="ha-form-row">
                <div class="ha-form-group">
                    <label for="customer">Customer</label>
                    <select id="customer" class="form-select">
                        <option value="">Select Customer</option>
                    </select>
                </div>
                
                <div class="ha-form-group">
                    <label for="pricelist">Price List</label>
                    <select id="pricelist" class="form-select">
                        <option value="">Select Price List</option>
                    </select>
                </div>
                
                <div class="ha-form-group">
                    <label for="sub_total">Total</label>
                    <input type="text" id="sub_total" class="form-control" value="0.00" readonly>
                </div>
            </div>
            
            <div class="table-responsive">
                <table class="ha-items-table">
                    <thead>
                        <tr>
                            <th width="15%">Item Code</th>
                            <th width="25%">Item Name</th>
                            <th width="8%">UOM</th>
                            <th width="8%">Qty</th>
                            <th width="10%">Rate</th>
                            <th width="12%">Amount</th>
                            <th width="4%">Action</th>
                        </tr>
                    </thead>
                    <tbody id="itemsTableBody">
                        <!-- Rows will be added dynamically -->
                    </tbody>
                </table>
            </div>
            
            <div class="ha-total-add-button-container">
                <button class="ha-add-item-btn" id="btnAddRow">
                    <i class="fas fa-plus me-2"></i>Add Item
                </button>
                <div>
                    <span>Total</span>
                    <span class="ha-total-value" id="totalAmount">$0.00</span>
                </div>
            </div>
            
            <div class="ha-totals-section">
            </div>
        </div>
    </div>
</div>

<div class="ha-sticky-footer">
    <div class="ha-function-keys">
        <button class="ha-function-key" data-action="payment" id="btnPayment">
            <i class="fas fa-money-bill-wave"></i>
            <span class="ha-key-label">Payment (F1)</span>
        </button>
        <button class="ha-function-key" data-action="options">
            <i class="fas fa-cog"></i>
            <span class="ha-key-label">Options (F10)</span>
        </button>
        <button class="ha-function-key" data-action="quantity">
            <i class="fas fa-boxes"></i>
            <span class="ha-key-label">Qty (F5)</span>
        </button>
        <button class="ha-function-key" data-action="return">
            <i class="fas fa-undo"></i>
            <span class="ha-key-label">Return (F12)</span>
        </button>
        <button class="ha-function-key" data-action="discount">
            <i class="fas fa-tag"></i>
            <span class="ha-key-label">Discount (F7)</span>
        </button>
    </div>
    <button class="ha-logout-btn" id="btnLogout">
        <i class="fas fa-sign-out-alt me-2"></i>Logout
    </button>
</div>

<!-- Loading overlay -->
<div class="ha-loading-overlay" id="loadingOverlay">
    <div class="ha-spinner"></div>
</div>

<!-- Search dropdown -->
<div class="ha-item-search-dropdown" id="searchDropdown"></div>

<script>
// Global variables
let allItems = [];
let allSettings = [];
let allCustomers = [];
let allPriceLists = [];
let activeItemField = null;
let currentFocusIndex = -1;
let isInSearchMode = false;
let currentSearchTerm = '';
let currentSearchResults = [];

// DOM elements
const itemsTableBody = document.getElementById('itemsTableBody');
const totalAmount = document.getElementById('totalAmount');
const subTotal = document.getElementById('sub_total');
const btnAddRow = document.getElementById('btnAddRow');
const searchDropdown = document.getElementById('searchDropdown');
const customerSelect = document.getElementById('customer');
const priceListSelect = document.getElementById('pricelist');
const btnPayment = document.getElementById('btnPayment');
const loadingOverlay = document.getElementById('loadingOverlay');
const tableContainer = document.querySelector('.table-responsive');

// Initialize the POS when DOM is loaded
document.addEventListener('DOMContentLoaded', initPOS);

function initPOS() {
    cacheDOM();
    bindEvents();
    loadInitialData();
    addNewRow(); // Add first row
    showToast('POS System Ready', 'success');
    // Set initial focus to customer field
    setTimeout(() => {
        customerSelect.focus();
        const fields = getFocusableFields();
        currentFocusIndex = fields.indexOf(customerSelect);
    }, 100);
}

// Cache DOM elements
function cacheDOM() {
    // Already defined above
}

// Show toast notification
function showToast(message, type = 'success') {
    // Remove existing toasts
    const existingToasts = document.querySelectorAll('.ha-toast');
    existingToasts.forEach(toast => toast.remove());
    
    const toast = document.createElement('div');
    toast.className = `ha-toast ha-toast-${type}`;
    toast.innerHTML = `
        <div class="ha-toast-icon">
            <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'}"></i>
        </div>
        <div class="ha-toast-message">${message}</div>
    `;
    
    document.body.appendChild(toast);
    
    // Show toast
    setTimeout(() => {
        toast.classList.add('show');
    }, 10);
    
    // Hide after 3 seconds
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 300);
    }, 3000);
}

// Show loading overlay
function showLoading() {
    loadingOverlay.style.display = 'flex';
}

// Hide loading overlay
function hideLoading() {
    loadingOverlay.style.display = 'none';
}

// Bind event listeners
function bindEvents() {
    btnAddRow.addEventListener('click', addNewRow);
    btnPayment.addEventListener('click', saveSalesInvoice);
    
    // Event delegation for dynamic elements
    document.addEventListener('click', function(e) {
        // Item search for both name and code
        if (e.target.classList.contains('ha-item-input') || 
            e.target.classList.contains('item-code')) {
            showItemSearchDropdown(e.target);
            activeItemField = e.target;
        } 
        // Delete item
        else if (e.target.closest('.btn-danger')) {
            removeItem(e.target.closest('.btn-danger'));
        }
        // Hide dropdown when clicking elsewhere
        else if (!e.target.closest('.ha-item-search-dropdown')) {
            searchDropdown.style.display = 'none';
            isInSearchMode = false;
        }
        
        // Function keys
        if (e.target.closest('.ha-function-key')) {
            const action = e.target.closest('.ha-function-key').dataset.action;
            handleFunctionKey(action);
        }
    });
    
    // Input events for both item code and name search
    document.addEventListener('input', function(e) {
        if (e.target.classList.contains('item-code') || 
            e.target.classList.contains('ha-item-input')) {
            const searchTerm = e.target.value.trim();
            currentSearchTerm = searchTerm;
            
            if (searchTerm.length > 1) {
                searchItems(searchTerm, e.target.classList.contains('item-code') ? 'code' : 'name');
                positionDropdown(e.target);
            } else {
                searchDropdown.style.display = 'none';
                isInSearchMode = false;
            }
        }
    });
    
    // Change events for quantity and rate
    document.addEventListener('change', function(e) {
        if (e.target.classList.contains('item-qty') || 
            e.target.classList.contains('item-rate')) {
            updateItemAmount(e.target);
        }
    });
    
    // Focus events for form fields
    document.addEventListener('focusin', function(e) {
        if (e.target.matches('input, select')) {
            // Remove active class from all fields
            document.querySelectorAll('input, select').forEach(field => {
                field.classList.remove('form-field-active');
            });
            
            // Add active class to current field
            e.target.classList.add('form-field-active');
            
            // Update current focus index
            const fields = getFocusableFields();
            currentFocusIndex = fields.indexOf(e.target);
            
            // If it's an item field, set as active
            if (e.target.classList.contains('ha-item-input') || 
                e.target.classList.contains('item-code')) {
                activeItemField = e.target;
            }
        }
    });
    
    // Mouse wheel event for scrolling
    document.addEventListener('wheel', function(e) {
        // If search dropdown is visible and mouse is over it, allow scrolling
        if (searchDropdown.style.display === 'block' && 
            e.target.closest('.ha-item-search-dropdown')) {
            // Let the native scroll behavior handle it
            return;
        }
        
        // Prevent scrolling on other elements if needed
        // e.preventDefault();
    }, { passive: true });
    
    // Touch events for mobile scrolling
    document.addEventListener('touchstart', function(e) {
        // Store the initial touch position
        this.touchStartY = e.touches[0].clientY;
    }, { passive: true });
    
    document.addEventListener('touchmove', function(e) {
        // Allow touch scrolling for search dropdown and table
        if (searchDropdown.style.display === 'block' && 
            e.target.closest('.ha-item-search-dropdown')) {
            return;
        }
        
        // Prevent default for other elements if needed
        // e.preventDefault();
    }, { passive: true });
    
    // Keyboard shortcuts
    document.addEventListener('keydown', function(e) {
        // Function keys
        if (e.key === 'F1' || e.key === 'F2') {
            e.preventDefault();
            saveSalesInvoice();
        }
        else if (e.key === 'F5') {
            e.preventDefault();
            handleFunctionKey('quantity');
        }
        else if (e.key === 'F7') handleFunctionKey('discount');
        else if (e.key === 'F10') handleFunctionKey('options');
        else if (e.key === 'F12') handleFunctionKey('return');
        
        // Enter key to move to next field/row or confirm selection
        if (e.key === 'Enter') {
            const activeElement = document.activeElement;
            
            // Handle Enter in search dropdown
            if (searchDropdown.style.display === 'block') {
                e.preventDefault();
                const activeResult = searchDropdown.querySelector('.ha-search-result-active');
                if (activeResult) {
                    activeResult.click();
                    searchDropdown.style.display = 'none';
                    isInSearchMode = false;

                    if (allSettings.length > 0 && allSettings[0].ha_on_pres_enter === "nextrow") {
                        addNewRow();
                    } else {
                        moveToNextField();
                    }
                }
            }
            // Handle Enter in item code field - FIRST ENTER SHOWS SEARCH
            else if (activeElement.classList.contains('item-code')) {
                e.preventDefault();
                const row = activeElement.closest('tr');
                const code = activeElement.value.trim();
                currentSearchTerm = code;
                
                if (code) {
                    // If we're already in search mode, select the first result
                    if (isInSearchMode) {
                        const firstResult = searchDropdown.querySelector('.ha-search-result-item');
                        if (firstResult) {
                            firstResult.click();
                            searchDropdown.style.display = 'none';
                            isInSearchMode = false;
                            
                            // Move to rate field after selection
                            row.querySelector('.item-rate').focus();
                            row.querySelector('.item-rate').select();
                        }
                    } else {
                        // First Enter - show search results
                        showItemSearchDropdown(activeElement);
                        searchItems(code, 'code');
                        isInSearchMode = true;
                    }
                } else {
                    // If empty, show all items
                    showItemSearchDropdown(activeElement);
                    displaySearchResults(allItems.slice(0, 10));
                    isInSearchMode = true;
                }
            }
            // Handle Enter in item name field - FIRST ENTER SHOWS SEARCH
            else if (activeElement.classList.contains('ha-item-input') && 
                     !activeElement.classList.contains('item-code')) {
                e.preventDefault();
                const row = activeElement.closest('tr');
                const name = activeElement.value.trim();
                currentSearchTerm = name;
                
                if (isInSearchMode) {
                    // Second Enter - select first result
                    const firstResult = searchDropdown.querySelector('.ha-search-result-item');
                    if (firstResult) {
                        firstResult.click();
                        searchDropdown.style.display = 'none';
                        isInSearchMode = false;
                        
                        // Move to rate field after selection
                        row.querySelector('.item-rate').focus();
                        row.querySelector('.item-rate').select();
                    }
                } else {
                    // First Enter - show search results
                    showItemSearchDropdown(activeElement);
                    searchItems(name, 'name');
                    isInSearchMode = true;
                }
            }
            // Handle Enter in rate field
            else if (activeElement.classList.contains('item-rate')) {
                e.preventDefault();
                const row = activeElement.closest('tr');
                row.querySelector('.item-qty').focus();
                row.querySelector('.item-qty').select();
            }
            // Handle Enter in quantity field
            else if (activeElement.classList.contains('item-qty')) {
                e.preventDefault();
                
                const row = activeElement.closest('tr');
                const nextRow = row.nextElementSibling;
                
                if (nextRow) {
                    nextRow.querySelector('.item-code').focus();
                    nextRow.querySelector('.item-code').select();
                } else {
                    // If no next row, add new row and focus on item code
                    addNewRow();
                    const newRow = itemsTableBody.lastChild;
                    newRow.querySelector('.item-code').focus();
                    newRow.querySelector('.item-code').select();
                }
            }
            // Handle Enter in customer or price list fields
            else if (activeElement === customerSelect || activeElement === priceListSelect) {
                e.preventDefault();
                moveToNextField();
            }
        }
        
        // Tab key to move to next field
        if (e.key === 'Tab') {
            e.preventDefault();
            moveToNextField();
        }
        
        // Shift+Tab to move to previous field
        if (e.key === 'Tab' && e.shiftKey) {
            e.preventDefault();
            moveToPreviousField();
        }
        
        // Escape key to close dropdown and exit search mode
        if (e.key === 'Escape') {
            searchDropdown.style.display = 'none';
            isInSearchMode = false;
            
            // If we were in an item field, keep focus there
            if (activeItemField) {
                activeItemField.focus();
                activeItemField.select();
            }
        }
        
        // Arrow keys in search dropdown
        if (searchDropdown.style.display === 'block') {
            if (e.key === 'ArrowDown') {
                e.preventDefault();
                navigateSearchResults(1);
            } else if (e.key === 'ArrowUp') {
                e.preventDefault();
                navigateSearchResults(-1);
            }
        }
        // Arrow keys to navigate between items in the table
        else if ((e.key === 'ArrowDown' || e.key === 'ArrowUp') && 
                 document.activeElement.closest('tr') && 
                 !document.activeElement.classList.contains('btn-danger')) {
            e.preventDefault();
            navigateTableRows(e.key === 'ArrowDown' ? 1 : -1);
        }
    });
    
    // Logout button
    document.getElementById('btnLogout').addEventListener('click', function() {
        window.location.href = '/logout';
    });
    
    // Handle window resize to reposition dropdown
    window.addEventListener('resize', function() {
        if (searchDropdown.style.display === 'block' && activeItemField) {
            positionDropdown(activeItemField);
        }
    });
}

// Navigate search results with arrow keys
function navigateSearchResults(direction) {
    const results = searchDropdown.querySelectorAll('.ha-search-result-item');
    if (results.length === 0) return;
    
    let currentActive = searchDropdown.querySelector('.ha-search-result-active');
    let index = 0;
    
    if (currentActive) {
        index = Array.from(results).indexOf(currentActive);
        currentActive.classList.remove('ha-search-result-active');
        index = (index + direction + results.length) % results.length;
    } else {
        // If no active item, set first item as active
        index = 0;
    }
    
    results[index].classList.add('ha-search-result-active');
    results[index].scrollIntoView({ block: 'nearest' });
}

// Navigate between table rows with arrow keys
function navigateTableRows(direction) {
    const rows = itemsTableBody.querySelectorAll('tr');
    if (rows.length === 0) return;
    
    const currentRow = document.activeElement.closest('tr');
    let index = Array.from(rows).indexOf(currentRow);
    
    if (index !== -1) {
        index = (index + direction + rows.length) % rows.length;
        const nextRow = rows[index];
        
        // Find the same type of input in the next row
        const currentInputType = document.activeElement.className.split(' ')[0];
        const nextInput = nextRow.querySelector('.' + currentInputType);
        
        if (nextInput) {
            nextInput.focus();
            nextInput.select();
            
            // Update current focus index
            const fields = getFocusableFields();
            currentFocusIndex = fields.indexOf(nextInput);
            
            // Scroll the row into view
            nextRow.scrollIntoView({ block: 'nearest', behavior: 'smooth' });
        }
    }
}

// Get all focusable fields in order
function getFocusableFields() {
    const fields = [];
    
    // Customer and price list fields
    fields.push(customerSelect);
    fields.push(priceListSelect);
    
    // Item rows fields
    const rows = itemsTableBody.querySelectorAll('tr');
    rows.forEach(row => {
        fields.push(row.querySelector('.item-code'));
        fields.push(row.querySelector('.item-rate'));
        fields.push(row.querySelector('.item-qty'));
    });
    
    // Filter out null values
    return fields.filter(field => field !== null);
}

// Move to next focusable field
function moveToNextField() {
    const fields = getFocusableFields();
    currentFocusIndex = (currentFocusIndex + 1) % fields.length;
    fields[currentFocusIndex].focus();
    
    // Select text if it's an input field
    if (fields[currentFocusIndex].tagName === 'INPUT') {
        fields[currentFocusIndex].select();
    }
}

// Move to previous focusable field
function moveToPreviousField() {
    const fields = getFocusableFields();
    currentFocusIndex = (currentFocusIndex - 1 + fields.length) % fields.length;
    fields[currentFocusIndex].focus();
    
    // Select text if it's an input field
    if (fields[currentFocusIndex].tagName === 'INPUT') {
        fields[currentFocusIndex].select();
    }
}

// Load initial data
function loadInitialData() {
    showLoading();
    loadPosSettings();
    // Load customers
    loadCustomers(function() {
        // Load price lists
        loadPriceLists(function() {
            // Load all items
            loadAllItems(function() {
                hideLoading();
            });
        });
    });
}

// Load customers
function loadCustomers(callback) {
    customerSelect.innerHTML = '<option value="">Select Customer</option>';
    frappe.call({
        method: "frappe.client.get_list",
        args: {
            doctype: "Customer",
            fields: ["name", "customer_name"],
            limit: 100
        },
        callback: function(response) {
            if (response.message) {
                allCustomers = response.message;
                allCustomers.forEach(customer => {
                    const option = document.createElement('option');
                    option.value = customer.name;
                    option.textContent = customer.customer_name || customer.name;
                    customerSelect.appendChild(option);
                });
                if (callback) callback();
            } else {
                showToast('Failed to load customers', 'error');
                if (callback) callback();
            }
        },
        error: function(error) {
            showToast('Error loading customers', 'error');
            if (callback) callback();
        }
    });
}

// Load price lists
function loadPriceLists(callback) {
    priceListSelect.innerHTML = '<option value="">Select Price List</option>';
    
    frappe.call({
        method: "frappe.client.get_list",
        args: {
            doctype: "Price List",
            fields: ["name", "price_list_name"],
            filters: { enabled: 1 }
        },
        callback: function(response) {
            if (response.message) {
                allPriceLists = response.message;
                allPriceLists.forEach(priceList => {
                    const option = document.createElement('option');
                    option.value = priceList.name;
                    option.textContent = priceList.price_list_name || priceList.name;
                    priceListSelect.appendChild(option);
                });
                if (callback) callback();
            } else {
                showToast('Failed to load price lists', 'error');
                if (callback) callback();
            }
        },
        error: function(error) {
            showToast('Error loading price lists', 'error');
            if (callback) callback();
        }
    });
}

// Load all items
function loadAllItems(callback) {
    frappe.call({
        method: "frappe.client.get_list",
        args: {
            doctype: "Item",
            fields: ["name", "item_name", "description", "stock_uom", "valuation_rate"],
            limit: 1000
        },
        callback: function(response) {
            if (response.message) {
                allItems = response.message;
                if (callback) callback();
            } else {
                showToast('Failed to load items', 'error');
                if (callback) callback();
            }
        },
        error: function(error) {
            showToast('Error loading items', 'error');
            if (callback) callback();
        }
    });
}

// Search items with type parameter (code or name)
function searchItems(searchTerm, searchType = 'name') {
    frappe.call({
        method: "frappe.client.get_list",
        args: {
            doctype: "Item",
            fields: ["name", "item_name", "description", "stock_uom", "valuation_rate"],
            filters: searchType === 'code' ? 
                {"name": ["like", `%${searchTerm}%`]} :
                {"item_name": ["like", `%${searchTerm}%`]},
            limit: 20
        },
        callback: function(response) {
            if (response.message) {
                currentSearchResults = response.message;
                const itemsWithPrice = response.message.map(item => ({
                    ...item,
                    price_list_rate: item.valuation_rate,
                    actual_qty: 1
                }));
                displaySearchResults(itemsWithPrice);
            }
        }
    });
}

// Display search results
function displaySearchResults(items) {
    searchDropdown.innerHTML = '';
    
    if (items.length === 0) {
        searchDropdown.innerHTML = '<div class="ha-search-result-item">No items found</div>';
        return;
    }
    
    items.forEach((item, index) => {
        const resultItem = document.createElement('div');
        resultItem.className = 'ha-search-result-item';
        if (index === 0) resultItem.classList.add('ha-search-result-active');
        resultItem.innerHTML = `
            <div>
                <span class="ha-item-code">${item.name}</span>
                <span class="ha-item-name">${item.item_name || item.name}</span>
            </div>
            <div class="ha-item-price">$${(item.valuation_rate || 0).toFixed(2)}</div>
        `;
        
        resultItem.addEventListener('click', () => {
            selectItem(item, activeItemField.closest('tr'));
            searchDropdown.style.display = 'none';
            isInSearchMode = false;
            
            // Focus on rate after selecting item
            const row = activeItemField.closest('tr');
            row.querySelector('.item-rate').focus();
            row.querySelector('.item-rate').select();
        });
        
        searchDropdown.appendChild(resultItem);
    });
}

// Position dropdown
function positionDropdown(element) {
    const rect = element.getBoundingClientRect();
    searchDropdown.style.display = 'block';
    searchDropdown.style.width = '400px';
    
    // Adjust position if near bottom of screen
    const spaceBelow = window.innerHeight - rect.bottom;
    const spaceAbove = rect.top;
    
    if (spaceBelow < 300 && spaceAbove > 300) {
        // Show above the input field
        searchDropdown.style.top = (rect.top + window.scrollY - 300) + 'px';
    } else {
        // Show below the input field
        searchDropdown.style.top = (rect.bottom + window.scrollY) + 'px';
    }
    
    searchDropdown.style.left = rect.left + 'px';
}

// Show item search dropdown
function showItemSearchDropdown(field) {
    activeItemField = field;
    positionDropdown(field);
    displaySearchResults(allItems.slice(0, 10));
}

// Select item and populate row
function selectItem(item, row) {
    row.querySelector('.item-code').value = item.name;
    row.querySelector('.item-name').value = item.item_name || item.name;
    row.querySelector('.item-uom').value = item.stock_uom || 'Nos';
    row.querySelector('.item-rate').value = (item.valuation_rate || 0).toFixed(2);
    
    // Calculate amount
    updateItemAmount(row.querySelector('.item-qty'));
    
    // Clear search mode
    isInSearchMode = false;
    currentSearchTerm = '';
}

// Add new row
function addNewRow() {
    const newRow = document.createElement('tr');
    newRow.innerHTML = `
        <td class="ha-relative">
            <input type="text" class="item-code form-control ha-item-input" placeholder="Type item code">
        </td>
        <td>
            <input type="text" class="item-name form-control ha-item-input" placeholder="Click to see all items">
        </td>
        <td>
            <input type="text" class="item-uom form-control" value="Nos" readonly>
        </td>
        <td>
            <input type="number" class="item-qty form-control" value="1" min="1">
        </td>
        <td>
            <input type="number" class="item-rate form-control" value="0.00" step="0.01">
        </td>
        <td>
            <input type="text" class="item-amount form-control" value="0.00" readonly>
        </td>
        <td class="text-center">
            <button class="btn btn-sm btn-danger">
                <i class="fas fa-trash"></i>
            </button>
        </td>
    `;
    
    itemsTableBody.appendChild(newRow);
    
    // Auto-focus on the new item code field
    setTimeout(() => {
        const itemCodeInput = newRow.querySelector('.item-code');
        itemCodeInput.focus();
        itemCodeInput.select();
        
        // Update current focus index
        const fields = getFocusableFields();
        currentFocusIndex = fields.indexOf(itemCodeInput);
    }, 100);
}

// Update item amount
function updateItemAmount(input) {
    const row = input.closest('tr');
    const qty = parseFloat(row.querySelector('.item-qty').value) || 0;
    const rate = parseFloat(row.querySelector('.item-rate').value) || 0;
    const amountCell = row.querySelector('.item-amount');
    
    const amount = qty * rate;
    amountCell.value = amount.toFixed(2);
    
    updateTotals();
}

// Remove item
function removeItem(button) {
    if (itemsTableBody.querySelectorAll('tr').length > 1) {
        button.closest('tr').remove();
        updateTotals();
    } else {
        showToast('You must have at least one item row.', 'error');
    }
}

// Update totals
function updateTotals() {
    let total = 0;
    const amountCells = document.querySelectorAll('.item-amount');
    
    amountCells.forEach(cell => {
        total += parseFloat(cell.value) || 0;
    });
    
    totalAmount.textContent = `$${total.toFixed(2)}`;
    subTotal.value = total.toFixed(2);
}

// Handle function keys
function handleFunctionKey(action) {
    const actions = {
        payment: () => saveSalesInvoice(),
        quantity: () => {
            const rows = itemsTableBody.querySelectorAll('tr');
            if (rows.length > 0) {
                const lastRow = rows[rows.length - 1];
                const qtyInput = lastRow.querySelector('.item-qty');
                qtyInput.focus();
                qtyInput.select();
                
                // Update current focus index
                const fields = getFocusableFields();
                currentFocusIndex = fields.indexOf(qtyInput);
            }
        },
        discount: () => showToast('Discount feature coming soon', 'success'),
        options: () => showToast('Options menu coming soon', 'success'),
        return: () => showToast('Return process coming soon', 'success')
    };
    
    if (actions[action]) actions[action]();
}

// Save sales invoice
function saveSalesInvoice() {
    // Validate required fields
    if (!customerSelect.value) {
        showToast('Please select a customer', 'error');
        customerSelect.focus();
        return;
    }
    
    // Collect items data
    const items = [];
    const rows = itemsTableBody.querySelectorAll('tr');
    let hasItems = false;
    
    rows.forEach(row => {
        const itemCode = row.querySelector('.item-code').value;
        const qty = parseFloat(row.querySelector('.item-qty').value) || 0;
        const rate = parseFloat(row.querySelector('.item-rate').value) || 0;
        
        if (itemCode && qty && rate) {
            hasItems = true;
            items.push({
                item_code: itemCode,
                qty: qty,
                rate: rate
            });
        }
    });
    
    if (!hasItems) {
        showToast('Please add at least one item', 'error');
        const firstItemCode = itemsTableBody.querySelector('.item-code');
        if (firstItemCode) firstItemCode.focus();
        return;
    }
    
    showLoading();
    
    // Create sales invoice
    frappe.call({
        method: "havano_pos_addson.havano_pos_addson.doctype.ha_pos_invoice.ha_pos_invoice.create_sales_invoice",
        args: {
            customer: customerSelect.value,
            items: items,
            price_list: priceListSelect.value || undefined
        },
        callback: function(response) {
            hideLoading();
            if (response.message) {
                showToast('Sales Invoice created successfully!', 'success');
                
                // Reset form
                itemsTableBody.innerHTML = '';
                addNewRow();
                customerSelect.value = '';
                priceListSelect.value = '';
                updateTotals();
            }
        },
        error: function(err) {
            hideLoading();
            showToast('Error creating sales invoice: ' + (err.message || 'Unknown error'), 'error');
        }
    });
}

// Load POS settings
function loadPosSettings() {
    frappe.call({
        method: "frappe.client.get_list",
        args: {
            doctype: "HA POS Setting",
            fields: ["ha_pos_settings_on", "ha_on_pres_enter", "default_customer", "default_price_list"],
            limit: 2
        },
        callback: function(response) {
            if (response.message) {
                allSettings = response.message;
                if (allSettings.length > 0) {
                    setDefaultValues(allSettings[0]);
                }
            } else {
                showToast('Failed to load POS settings', 'error');
            }
        },
        error: function(error) {
            showToast('Error loading POS settings', 'error');
        }
    });
}

// Set default values from settings
function setDefaultValues(data) {
    if (!data) return;
    
    // Set default customer
    if (data.default_customer) {
        const customerOptionExists = Array.from(customerSelect.options).some(
            option => option.value === data.default_customer
        );
        
        if (!customerOptionExists) {
            const option = document.createElement('option');
            option.value = data.default_customer;
            option.textContent = data.default_customer;
            customerSelect.appendChild(option);
        }
        customerSelect.value = data.default_customer;
    }
    
    // Set default price list
    if (data.default_price_list) {
        const priceListOptionExists = Array.from(priceListSelect.options).some(
            option => option.value === data.default_price_list
        );
        
        if (!priceListOptionExists) {
            const option = document.createElement('option');
            option.value = data.default_price_list;
            option.textContent = data.default_price_list;
            priceListSelect.appendChild(option);
        }
        priceListSelect.value = data.default_price_list;
    }
}

// Adjust main styles
function adjustMainStyles() {
    const mainElement = document.querySelector('main.container.my-4');
    if (mainElement) {
        // Replace class 'container' with 'container-fluid'
        mainElement.classList.replace('container', 'container-fluid');

        // Set styles
        mainElement.style.setProperty('margin', '0', 'important');
        mainElement.style.setProperty('padding', '0', 'important');
        mainElement.style.setProperty('width', '100%', 'important');
    }
}

// Make save function globally available for testing
window.saveSalesInvoice = saveSalesInvoice;

// Run when window loads
window.onload = function() {
    adjustMainStyles();
};
</script>
{% endblock %}